# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
  - {resource: internal-parameters.yaml}
  - {resource: ../src/EventSystem/Controller/config.yaml}
  - {resource: ../src/EventSystem/ElementDefragmentize/config.yaml}
  - {resource: ../src/EventSystem/ElementFragmentize/config.yaml}
  - {resource: ../src/EventSystem/EntityManager/config.yaml}
  - {resource: ../src/EventSystem/Etag/config.yaml}
  - {resource: ../src/EventSystem/Exception/config.yaml}
  - {resource: ../src/EventSystem/Kernel/config.yaml}
  - {resource: ../src/EventSystem/Request/config.yaml}
  - {resource: ../src/EventSystem/Response/config.yaml}
  - {resource: ../src/EventSystem/NormalizedValueToRawValue/config.yaml}
  - {resource: ../src/EventSystem/RawValueToNormalizedValue/config.yaml}
  - {resource: ../src/EventSystem/ElementPropertyChange/config.yaml}
  - {resource: ../src/EventSystem/ElementPropertyReset/config.yaml}
  - {resource: ../src/EventSystem/ElementPropertyReturn/config.yaml}

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true    # Automatically injects dependencies in your services.
    autoconfigure: true  # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Kernel.php'
      - '../src/EventSystem/'

  # library services

  monolog_json_formatter:
    class: Monolog\Formatter\JsonFormatter

  Syndesi\CypherEntityManager\EventListener\OpenCypher\NodeCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\NodeDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\NodeMergeToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\RelationCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\RelationDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\RelationMergeToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarNodeQueueCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarNodeQueueDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarNodeQueueMergeToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarRelationQueueCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarRelationQueueDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\OpenCypher\SimilarRelationQueueMergeToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\NodeConstraintCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\NodeConstraintDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\NodeIndexCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\NodeIndexDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\RelationConstraintCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\RelationConstraintDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\RelationIndexCreateToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  Syndesi\CypherEntityManager\EventListener\Neo4j\RelationIndexDeleteToStatementEventListener:
    tags:
      - name: kernel.event_listener
        event: 'Syndesi\CypherEntityManager\Event\ActionCypherElementToStatementEvent'
        method: 'onActionCypherElementToStatementEvent'

  # factories

  App\Factory\CypherEntityManagerFactory:
    arguments:
      $cypherAuth: '%env(CYPHER_AUTH)%'

  Syndesi\CypherEntityManager\Type\EntityManager:
    factory: ['@App\Factory\CypherEntityManagerFactory', 'createCypherEntityManager']

  App\Factory\MongoEntityManagerFactory:
    arguments:
      $mongoAuth: '%env(MONGO_AUTH)%'

  Syndesi\MongoEntityManager\Type\EntityManager:
    factory: ['@App\Factory\MongoEntityManagerFactory', 'createMongoEntityManager']

  App\Factory\ElasticEntityManagerFactory:
    arguments:
      $elasticAuth: '%env(ELASTIC_AUTH)%'

  Syndesi\ElasticEntityManager\Type\EntityManager:
    factory: ['@App\Factory\ElasticEntityManagerFactory', 'createElasticEntityManager']

  App\Factory\RedisFactory:
    arguments:
      $redisAuth: '%env(REDIS_AUTH)%'

  Predis\Client:
    factory: ['@App\Factory\RedisFactory', 'createRedis']
    class: Predis\Client

  App\Factory\RabbitMQFactory:
    arguments:
      $rabbitMQAuth: '%env(RABBITMQ_AUTH)%'

  PhpAmqpLib\Connection\AMQPStreamConnection:
    factory: ['@App\Factory\RabbitMQFactory', 'createRabbitMQ']
    class: PhpAmqpLib\Connection\AMQPStreamConnection

  App\Factory\S3ClientFactory:
    arguments:
      $s3Endpoint: '%env(S3_ENDPOINT)%'
      $s3AccessKeyId: '%env(S3_ACCESS_KEY_ID)%'
      $s3SecretAccessKey: '%env(S3_SECRET_ACCESS_KEY)%'
#      $s3BucketStorage: '%env(S3_BUCKET_STORAGE)%'
#      $s3BucketUpload: '%env(S3_BUCKET_UPLOAD)%'

  AsyncAws\S3\S3Client:
    factory: ['@App\Factory\S3ClientFactory', 'createS3Client']
    class: AsyncAws\S3\S3Client
